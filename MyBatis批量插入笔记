/**
 * MyBatis配置类
 * Created by macro on 2019/4/8.
 */
@Configuration
@EnableTransactionManagement
@MapperScan({"com.unicom.product.dao"})
public class MybatisConfig {
   @Bean("batchSqlSessionTemplateTwo")
    public SqlSessionTemplate getSqlSessionTemplateTwo(SqlSessionFactory sqlSessionFactory){
        return new SqlSessionTemplate(sqlSessionFactory,ExecutorType.BATCH);
    }

    @Primary
    @Bean("batchSqlSessionTemplateOne")
    public SqlSessionTemplate getSqlSessionTemplateOne(SqlSessionFactory sqlSessionFactory){
        return new SqlSessionTemplate(sqlSessionFactory,ExecutorType.SIMPLE);
    }


}


package com.unicom.product.service.imp;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.unicom.product.dao.PmsProductMapper;
import com.unicom.product.dao.PmsProductmoduleMapper;
import com.unicom.product.dto.PmsProductParam;
import com.unicom.product.dto.ProductAndModuleParam;
import com.unicom.product.model.PmsProduct;
import com.unicom.product.model.PmsProductmodule;
import com.unicom.product.service.PmsProductService;
import io.swagger.annotations.ApiModelProperty;
import org.apache.ibatis.session.ExecutorType;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.aop.framework.AopContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;


@Service
public class PmsProductServiceImp implements PmsProductService {

    @Autowired
    private PmsProductMapper pmsProductMapper;
    @Autowired
    private PmsProductmoduleMapper pmsProductmoduleMapper;


    @Resource(name = "batchSqlSessionTemplateTwo")
    private SqlSessionTemplate  sqlSessionTemplate;


    @Override
    public void createProductAndModules(ProductAndModuleParam param)  {
        /*获取产品信息，并插入数据库*/
        PmsProduct pmsProduct = param.getPmsProduct();
        pmsProduct.setOperatingTime(new Date());
        int insertNum = pmsProductMapper.insertSelective(pmsProduct);
        /*获取产品记录Id*/
        int pmsProductId = pmsProduct.getId();

        /*创建需要同步插入的产品模块List集合*/
        List<PmsProductmodule> modules = new ArrayList<>();

        /*从参数param中取出产品模块信息的List集合，并遍历组装modules*/
        List<Map<String,Object>> modulesInf = param.getModules();
        for(Map<String,Object> info : modulesInf ){
            PmsProductmodule pmsProductmodule = new PmsProductmodule();
            pmsProductmodule.setProductId(pmsProductId);
            pmsProductmodule.setSerialNumber((int)info.get("order"));
            String object = null;
            try {
                object = mapper.writeValueAsString(info);
            } catch (JsonProcessingException e) {
                e.printStackTrace();
                throw new RuntimeException();
            }
            pmsProductmodule.setObject(object);
            modules.add(pmsProductmodule);
        }
        /*PmsProductmoduleMapper mapper = sqlSessionTemplate.getMapper(PmsProductmoduleMapper.class);*/
        //SqlSession session =sessionFactory.openSession(ExecutorType.BATCH,false);


        for(PmsProductmodule module:modules){
            sqlSessionTemplate.insert("com.unicom.product.dao.PmsProductmoduleMapper.insertSelective",module);
                //pmsProductmoduleMapper.insertSelective(module);
            }
       // sqlSessionTemplate.commit();

    }
}

Mybatis有三种基本的Executor执行器: SimpleExecutor、ReuseExecutor、BatchExecutor。
SimpleExecutor：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。
ReuseExecutor：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map内，供下一次使用。简言之，就是重复使用Statement对象。
BatchExecutor：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。
作用范围：Executor的这些特点，都严格限制在SqlSession生命周期范围内。

Mybatis中如何指定使用哪一种Executor执行器？
答：在Mybatis配置文件中，可以指定默认的ExecutorType执行器类型，也可以手动给DefaultSqlSessionFactory的创建SqlSession的方法传递ExecutorType类型参数。




